// Mastermind CLI using remote API
// Swift 5.7+ (async/await)
import Foundation

// ---------- Models ----------
struct CreateGameResponse: Decodable { let game_id: String }
struct GuessRequest: Encodable { let game_id: String; let guess: String }
struct GuessResponse: Decodable { let black: Int; let white: Int }
struct ErrorResponse: Decodable { let error: String }

// ---------- API Client ----------
enum APIError: Error, CustomStringConvertible {
    case http(Int)
    case decoding
    case server(String)
    case unknown

    var description: String {
        switch self {
        case .http(let code): return "HTTP error \(code)"
        case .decoding: return "Failed to decode server response"
        case .server(let msg): return msg
        case .unknown: return "Unknown error"
        }
    }
}

final class GameAPI {
    private let base = URL(string: "https://mastermind.darkube.app")!
    private let session: URLSession = {
        let cfg = URLSessionConfiguration.default
        cfg.timeoutIntervalForRequest = 10
        cfg.httpAdditionalHeaders = ["Content-Type": "application/json"]
        return URLSession(configuration: cfg)
    }()

    func createGame() async throws -> String {
        var req = URLRequest(url: base.appendingPathComponent("/game"))
        req.httpMethod = "POST"

        let (data, resp) = try await session.data(for: req)
        guard let http = resp as? HTTPURLResponse else { throw APIError.unknown }
        guard (200..<300).contains(http.statusCode) else {
            if let err = try? JSONDecoder().decode(ErrorResponse.self, from: data) {
                throw APIError.server(err.error)
            }
            throw APIError.http(http.statusCode)
        }
        guard let cg = try? JSONDecoder().decode(CreateGameResponse.self, from: data) else {
            throw APIError.decoding
        }
        return cg.game_id
    }

    func makeGuess(gameId: String, guess: String) async throws -> GuessResponse {
        var req = URLRequest(url: base.appendingPathComponent("/guess"))
        req.httpMethod = "POST"
        req.httpBody = try JSONEncoder().encode(GuessRequest(game_id: gameId, guess: guess))

        let (data, resp) = try await session.data(for: req)
        guard let http = resp as? HTTPURLResponse else { throw APIError.unknown }
        if http.statusCode == 400 || http.statusCode == 404 {
            if let err = try? JSONDecoder().decode(ErrorResponse.self, from: data) {
                throw APIError.server(err.error)
            }
        }
        guard (200..<300).contains(http.statusCode) else { throw APIError.http(http.statusCode) }
        guard let gr = try? JSONDecoder().decode(GuessResponse.self, from: data) else {
            throw APIError.decoding
        }
        return gr
    }

    func deleteGame(gameId: String) async {
        var req = URLRequest(url: base.appendingPathComponent("/game/\(gameId)"))
        req.httpMethod = "DELETE"
        _ = try? await session.data(for: req) // best-effort; ignore errors
    }
}

// ---------- Input Parsing ----------
enum InputResult { case end, number(String), badInput }

func parseInput(_ s: String) -> InputResult {
    if s.lowercased() == "end" { return .end }
    if s.count == 4, s.allSatisfy({ ("1"..."6").contains(String($0)) }) {
        return .number(s)
    }
    return .badInput
}

// ---------- CLI ----------
@main
struct Main {
    static func printBW(_ r: GuessResponse) {
        let b = String(repeating: "B", count: r.black)
        let w = String(repeating: "W", count: r.white)
        print(b + w)
    }

    static func runLoop(gameId: String, api: GameAPI) async {
        print("Welcome to Mastermind (remote API mode)")
        print("Guess 4 digits between 1..6 (type 'end' to quit)")

        var attempts = 0
        while let line = readLine() {
            switch parseInput(line.trimmingCharacters(in: .whitespacesAndNewlines)) {
            case .end:
                print("Bye! Attempts: \(attempts)")
                await api.deleteGame(gameId: gameId)
                return
            case .badInput:
                print("Invalid input. Enter exactly 4 digits from 1..6 or 'end'.")
            case .number(let guess):
                attempts += 1
                do {
                    let res = try await api.makeGuess(gameId: gameId, guess: guess)
                    if res.black == 4 {
                        print("BBBB")
                        print("You WIN! Total attempts: \(attempts)")
                        await api.deleteGame(gameId: gameId)
                        return
                    } else {
                        printBW(res)
                    }
                } catch {
                    print("Error: \(error)")
                }
            }
        }
        await api.deleteGame(gameId: gameId)
    }

    static func main() async {
        let api = GameAPI()
        do {
            let gameId = try await api.createGame()
            await runLoop(gameId: gameId, api: api)
        } catch {
            print("Failed to start game: \(error)")
        }
    }
}
